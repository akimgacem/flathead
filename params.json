{"name":"Flathead","tagline":"A toy JavaScript interpreter written in C","body":"Flathead\r\n========\r\nFlathead is a tiny, portable JavaScript (ECMA-262) interpreter written in C.\r\n\r\n![Flathead's REPL](http://ndreynolds.com/images/flathead.png)\r\n\r\nThe interpreter does a direct evaluation of the parse treeâ€”it does not\r\ncurrently build any further IR or perform any optimizations. As a result, it\r\nstarts up very quickly, and performs well on code that wouldn't benefit much\r\nfrom optimization, and less well on code that would (e.g. loops). \r\n\r\nFlathead builds on Linux, OSX and \\*BSD, on x86, x86_64 and ARM architectures.\r\n\r\nFlathead comes with the full EcmaScript runtime (i.e. the Date, Math, Array\r\nand other global objects) as well as a console object.\r\n\r\nMost of the language is now implemented, you can see the remaining\r\nwork to be done on [the Docket](#the-docket).\r\n\r\n\r\nInstalling\r\n----------\r\nDownload or clone the source and run `make` within. \r\n\r\n    git clone https://github.com/ndreynolds/flathead.git\r\n    cd flathead\r\n    make\r\n\r\nThis creates an executable at `bin/flat` within the source directory. (You can\r\noptionally run `make install` to copy this to `/usr/local/bin/`.)\r\n\r\n#### Dependencies \r\n\r\nIf you received any errors, you may just be missing dependencies.\r\n\r\n`flex` and `bison` are required to generate the lexer and parser.\r\n\r\nThe default build depends on GNU Readline (`lreadline`) for the REPL, and PCRE\r\n(`lpcre`) for the regular expression implementation. They're not required,\r\nhowever, for a minimal build. Run `make readline=off regexp=off` to compile\r\nwithout them.\r\n\r\nIf you're still having trouble building, please create an issue.\r\n\r\n\r\nRunning\r\n-------\r\nOnce built, you can run `bin/flat` without arguments to start a REPL:\r\n\r\n    $ bin/flat\r\n    > 2 + 2\r\n    4\r\n    >\r\n\r\nOr with a script as argument:\r\n\r\n    $ bin/flat say_hello.js\r\n    Hello!\r\n\r\nView the parse tree with `-n`:\r\n\r\n    $ bin/flat -n\r\n    > 2 + 2\r\n    source list\r\n      expression statement\r\n        expression (binary)\r\n          +\r\n          number (2.000000)\r\n          number (2.000000)\r\n    4\r\n    >\r\n\r\nSee all the options with `-h`:\r\n\r\n    $ bin/flat -h\r\n    Usage: flat [options] [script.js] \r\n\r\n    Options:\r\n      -v, --version       print version info\r\n      -h, --help          print this help text\r\n      -i, --interactive   force REPL\r\n      -n, --nodes         print the AST\r\n      -t, --tokens        print tokens\r\n\r\n\r\nRunning the tests\r\n-----------------\r\nFlathead's test suite can be run against the `bin/flat` executable, as well as\r\nother EcmaScript implementations (assuming you have them installed).\r\n\r\nThe test runner itself requires Node.js. It locates files with names beginning\r\nin `test_` and executes them with the configured implementation and options.\r\nThere are a few Node module dependencies, so you'll need to run `npm install`\r\nbefore you can run the tests.\r\n\r\nThe Makefile has a few shortcuts:\r\n\r\n`make test` to run with Flathead's `bin/flat` executable.  \r\n`make test-v8` to run using `v8`.   \r\n`make test-node` to run using `node`.  \r\n`make test-sm` to run using `js` (SpiderMonkey).  \r\n`make test-rhino` to run using `rhino`.  \r\n\r\nThere's also:\r\n\r\n`make test-grammar` to verify parsing and AST formation \r\n\r\n\r\nThe Docket\r\n----------\r\n- With statement (`with`)\r\n- Labels (e.g. `loop1: ...; continue loop1;`)\r\n- Automatic Semicolon Insertion\r\n- Unicode\r\n- The JSON object ([JSON-js][1] can be used as polyfill)\r\n- URI functions\r\n- `String#replace`: replacement function\r\n- `String#split`: RegExp separators\r\n\r\n\r\n[1]: http://github.com/douglascrockford/JSON-js","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}